//Add. +
type add_t = ()
//Subtract -
type sub_t = ()
//Star. *
type star_t = ()
//Divide. /
type div_t = ()
//Modulo
type mod_t = ()


//Logical AND. &&
type land_t = ()
//Logical OR. ||
type lor_t = ()
//Logical NOT. !
type lnot_t = ()
//Bitwise shift left. <<
type shleft_t = ()
//Bitwise shift right. >>
type shright_t = ()

//Bitwise AND. &
type band_t = ()
//Bitwise OR. |
type bor_t = ()
//Bitwise XOR. ^
type bxor_t = ()
//Bitwise NOT. ~
type bnot_t = ()

//Less than. <
type less_t = ()
//Greater than. >
type greater_t = ()
//Less than or equal to. <=
type leq_t = ()
//Greater than or equal to. >=
type geq_t = ()
//Equal to. ==
type eq_t = ()
//Not equal to. !=
type neq_t = ()

type op_t = 
    add_t
    | sub_t
    | star_t
    | div_t
    | mod_t

    | land_t
    | lor_t
    | lnot_t

    | shleft_t
    | shright_t
    | band_t
    | bor_t
    | bxor_t
    | bnot_t

    | less_t
    | greater_t
    | leq_t
    | geq_t
    | eq_t
    | neq_t
